package com.eewms.controller;

import com.eewms.dto.UserDTO;
import com.eewms.dto.UserMapper;
import com.eewms.entities.User;
import com.eewms.repository.RoleRepository;
import com.eewms.services.IUserService;
import com.eewms.services.IEmailService;
import com.eewms.services.IVerificationTokenService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;


import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;


@Controller
@RequestMapping("/admin/users")
@RequiredArgsConstructor
public class UserController {

    private final IUserService userService;
    private final RoleRepository roleRepository;
    private final IVerificationTokenService verificationTokenService;
    private final IEmailService emailService;

    // 1. Danh s√°ch ng∆∞·ªùi d√πng
    @GetMapping
    public String listUsers(
            @RequestParam(value = "page", defaultValue = "0") int page,
            @RequestParam(value = "keyword", required = false) String keyword,
            Model model) {
        System.out.println("üîç T·ª´ kh√≥a t√¨m ki·∫øm: " + keyword); // TH√äM D√íNG N√ÄY

        Page<UserDTO> userPage = userService.searchUsers(page, keyword);
        model.addAttribute("users", userPage.getContent());
        model.addAttribute("userPage", userPage);
        model.addAttribute("keyword", keyword); // gi·ªØ l·∫°i t·ª´ kh√≥a t√¨m ki·∫øm

        // ‚úÖ Th√™m d√≤ng n√†y:
        model.addAttribute("userDTO", new UserDTO());
        model.addAttribute("allRoles", userService.getAllRoles());

        return "user-list";
    }


    // 2. Hi·ªÉn th·ªã form t·∫°o (kh√¥ng d√πng n·∫øu d√πng modal)
    @GetMapping("/new")
    public String showCreateForm(Model model) {
        UserDTO userDTO = new UserDTO();
        userDTO.setEnabled(false);

        model.addAttribute("userDTO", userDTO);
        model.addAttribute("allRoles", userService.getAllRoles());

        return "user-form";
    }

    // 3. X·ª≠ l√Ω t·∫°o user v√† g·ª≠i mail k√≠ch ho·∫°t
    @PostMapping
    public String createUser(@ModelAttribute("userDTO") UserDTO userDTO,
                             RedirectAttributes redirect) {
        try {
            // B·∫Øt bu·ªôc tr·∫°ng th√°i ban ƒë·∫ßu l√† ch∆∞a k√≠ch ho·∫°t
            userDTO.setEnabled(false);

            // Convert DTO ‚Üí Entity
            User user = UserMapper.toEntity(userDTO, roleRepository);

            // L∆∞u user (kh√¥ng c√≥ password)
            userService.saveUser(user);

            // T·∫°o token k√≠ch ho·∫°t
            String token = verificationTokenService.createVerificationToken(user);

            // G·ª≠i email x√°c th·ª±c
            emailService.sendActivationEmail(user, token);

            redirect.addFlashAttribute("message", "T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng. ƒê√£ g·ª≠i email k√≠ch ho·∫°t.");
        } catch (Exception e) {
            redirect.addFlashAttribute("error", "L·ªói khi t·∫°o ng∆∞·ªùi d√πng: " + e.getMessage());
        }
        return "redirect:/admin/users";
    }

    // 7. B·∫≠t / T·∫Øt tr·∫°ng th√°i
    @PostMapping("/{id}/toggle-status")
    public String toggleStatus(@PathVariable Long id, RedirectAttributes redirect) {
        try {
            User user = userService.findUserById(id)
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

            // N·∫øu ƒëang t·∫Øt ‚Üí chu·∫©n b·ªã b·∫≠t
            if (!user.isEnabled()) {
                if (user.getPassword() == null || user.getPassword().isBlank()) {
                    redirect.addFlashAttribute("error", "Kh√¥ng th·ªÉ b·∫≠t t√†i kho·∫£n v√¨ ng∆∞·ªùi d√πng ch∆∞a k√≠ch ho·∫°t qua email.");
                    return "redirect:/admin/users";
                }
            }

            // Th·ª±c hi·ªán ƒë·∫£o tr·∫°ng th√°i
            userService.toggleEnabledStatus(id);
            redirect.addFlashAttribute("message", "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng.");
        } catch (Exception e) {
            redirect.addFlashAttribute("error", "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + e.getMessage());
        }

        return "redirect:/admin/users";
    }
}
