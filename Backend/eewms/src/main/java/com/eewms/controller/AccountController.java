package com.eewms.controller;

import com.eewms.dto.ChangePasswordDTO;
import com.eewms.dto.UserProfileDTO;
import com.eewms.entities.User;
import com.eewms.services.IUserService;
import com.eewms.services.ImageUploadService;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.Optional;

@Controller
@RequestMapping("/account")
@RequiredArgsConstructor
public class AccountController {

    private final IUserService userService;
    private final ImageUploadService imageUploadService;

    @GetMapping("/info")
    public String showProfile(Model model, @AuthenticationPrincipal UserDetails userDetails) {
        User user = userService.findByUsername(userDetails.getUsername())
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        UserProfileDTO profileDTO = UserProfileDTO.builder()
                .fullName(user.getFullName())
                .email(user.getEmail())
                .phone(user.getPhone())
                .address(user.getAddress())
                .avatarUrl(user.getAvatarUrl())
                .build();

        model.addAttribute("profile", profileDTO);
        return "profile";
    }

    @PostMapping("/update-profile")
    public String updateProfile(@Valid @ModelAttribute("profile") UserProfileDTO profileDTO,
                                BindingResult result,
                                @RequestParam("avatarFile") MultipartFile avatarFile,
                                RedirectAttributes redirect,
                                @AuthenticationPrincipal UserDetails userDetails,
                                HttpSession session,
                                Model model) {

        // L·∫•y user hi·ªán t·∫°i
        String currentUsername = userDetails.getUsername();
        User currentUser = userService.findByUsername(currentUsername)
                .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

        // üîç Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a (ph·∫£i kh√°c user hi·ªán t·∫°i)
        Optional<User> userByEmail = userService.findByEmail(profileDTO.getEmail());
        if (userByEmail.isPresent() && !userByEmail.get().getUsername().equals(currentUsername)) {
            result.rejectValue("email", "error.profileDTO", "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ng∆∞·ªùi kh√°c");
        }

        // üîç Ki·ªÉm tra phone ƒë√£ t·ªìn t·∫°i ch∆∞a (ph·∫£i kh√°c user hi·ªán t·∫°i)
        if (profileDTO.getPhone() != null && !profileDTO.getPhone().isBlank()) {
            Optional<User> userByPhone = userService.findByPhone(profileDTO.getPhone());
            if (userByPhone.isPresent() && !userByPhone.get().getUsername().equals(currentUsername)) {
                result.rejectValue("phone", "error.profileDTO", "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng");
            }
        }

        // üîç Ki·ªÉm tra l·ªói validate t·ª´ annotation
        if (result.hasErrors()) {
            model.addAttribute("profile", profileDTO);
            return "profile"; // quay l·∫°i form
        }

        try {
            // ‚úÖ N·∫øu c√≥ file avatar
            if (!avatarFile.isEmpty()) {
                // Ki·ªÉm tra ƒë·ªãnh d·∫°ng file l√† ·∫£nh
                if (!avatarFile.getContentType().startsWith("image/")) {
                    result.rejectValue("avatarUrl", "error.profileDTO", "File avatar ph·∫£i l√† ·∫£nh");
                    model.addAttribute("profile", profileDTO);
                    return "profile";
                }

                String imageUrl = imageUploadService.uploadImage(avatarFile);
                profileDTO.setAvatarUrl(imageUrl);
            }

            // ‚úÖ C·∫≠p nh·∫≠t h·ªì s∆°
            userService.updateUserProfile(currentUsername, profileDTO);

            // ‚úÖ C·∫≠p nh·∫≠t timestamp avatar (ƒë·ªÉ reload ·∫£nh)
            session.setAttribute("avatarTimestamp", System.currentTimeMillis());

            redirect.addFlashAttribute("message", "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng.");
            return "redirect:/account/info";

        } catch (Exception e) {
            redirect.addFlashAttribute("error", "L·ªói khi c·∫≠p nh·∫≠t h·ªì s∆°: " + e.getMessage());
            return "redirect:/account/info";
        }
    }

    @GetMapping("/change-password")
    public String showChangePasswordForm(Model model) {
        model.addAttribute("changePasswordDTO", new ChangePasswordDTO());
        return "change-password";
    }

    @PostMapping("/change-password")
    public String changePassword(@ModelAttribute("changePasswordDTO") ChangePasswordDTO dto,
                                 @AuthenticationPrincipal UserDetails userDetails,
                                 RedirectAttributes redirect) {
        try {
            if (!dto.getNewPassword().equals(dto.getConfirmPassword())) {
                redirect.addFlashAttribute("error", "M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp.");
                return "redirect:/account/change-password";
            }

            userService.changePassword(userDetails.getUsername(), dto.getOldPassword(), dto.getNewPassword());
            redirect.addFlashAttribute("message", "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.");
            return "redirect:/account/info";
        } catch (Exception e) {
            redirect.addFlashAttribute("error", "L·ªói: " + e.getMessage());
            return "redirect:/account/change-password";
        }
    }
    @ModelAttribute("loggedInAvatarUrl")
    public String getAvatarUrl(@AuthenticationPrincipal UserDetails userDetails) {
        if (userDetails == null) return null;

        return userService.findByUsername(userDetails.getUsername())
                .map(User::getAvatarUrl)
                .orElse(null);
    }
    @ModelAttribute("avatarTimestamp")
    public long avatarTimestamp() {
        return System.currentTimeMillis();
    }


}